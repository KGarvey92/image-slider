{"version":3,"file":"main.js","mappings":"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","sources":["webpack://@kgarvey92/image-slider/./dist/image-slider.js","webpack://@kgarvey92/image-slider/./test/src/index.js"],"sourcesContent":["function moveSliderForward(container, slides) {\n  // initialise currentIndex = index of data-active\n  const currentSlide = container.querySelector('.slide[data-active]');\n  const currentIndex = currentSlide.dataset.index;\n\n  // find associated dot bar and store in nodelist\n  const dots = container.querySelectorAll('.dot');\n  const currentDot = container.querySelector('.dot[data-active]');\n  \n  // remove data-active from current slide and dot\n  currentSlide.removeAttribute('data-active');\n  currentDot.removeAttribute('data-active');\n\n  // check if currentIndex is equal to last index in nodelist\n  switch (currentIndex) {\n    // if so move data-active back to index 0.\n    case String(slides.length -1):\n      slides[0].setAttribute('data-active', '');\n      dots[0].setAttribute('data-active', '');\n      break;\n    // else move data-active to current index +1.\n    default:\n      const nextIndex = Number(currentIndex) + 1;\n      slides[nextIndex].setAttribute('data-active', '');\n      dots[nextIndex].setAttribute('data-active', '');\n      break;\n  }\n}\n\nfunction moveSliderBackward(container, slides) {\n  // initialise currentIndex = index of data-active\n  const currentSlide = container.querySelector('.slide[data-active]');\n  const currentIndex = currentSlide.dataset.index;\n  \n  // find associated dot bar and store in nodelist\n  const dots = container.querySelectorAll('.dot');\n  const currentDot = container.querySelector('.dot[data-active]');\n  \n  // remove data-active from current slide and dot\n  currentSlide.removeAttribute('data-active');\n  currentDot.removeAttribute('data-active');\n\n  // check if currentIndex is equal to first index in nodelist\n  switch (currentIndex) {\n    // if so move data-active to last index.\n    case '0':\n      slides[slides.length - 1].setAttribute('data-active', '');\n      dots[slides.length - 1].setAttribute('data-active', '');\n      break;\n    // else move data-active to current index - 1.\n    default:\n      const prevIndex = Number(currentIndex) - 1;\n      slides[prevIndex].setAttribute('data-active', '');\n      dots[prevIndex].setAttribute('data-active', '');\n      break;\n  }\n}\n\nfunction createDotBar(container, slides) {\n  let dotContainer = document.createElement('div');\n  dotContainer.classList.add('dot-bar');\n\n  for (let i = 0; i < slides.length; i++) {\n    let dot = document.createElement('div');\n    dot.classList.add('dot');\n    dot.setAttribute('data-index', i);\n    if (i === 0) {\n      dot.setAttribute('data-active', '');\n    }\n    dotContainer.appendChild(dot);\n  }\n\n  container.appendChild(dotContainer);\n}\n\nfunction setupSlider(containerSelector='.reel', slidesSelector='.slide', interval=5000)  {\n const container = document.querySelector(containerSelector);\n const slides = container.querySelectorAll(slidesSelector);\n\n  //Create and append previous image button\n  const prevBtn = document.createElement('img');\n  prevBtn.setAttribute('src', 'images/arrow-left.svg');\n  prevBtn.setAttribute('alt', 'back arrow');\n  prevBtn.classList.add('prev-btn');\n  container.appendChild(prevBtn);\n\n  //Create and append next image button\n  const nextBtn = document.createElement('img');\n  nextBtn.setAttribute('src', 'images/arrow-right.svg');\n  nextBtn.setAttribute('alt', 'foorward arrow');\n  nextBtn.classList.add('next-btn');\n  container.appendChild(nextBtn);\n\n  // apply data indexes to each slide\n  for (let i = 0; i < slides.length; i++) {\n    slides[i].setAttribute('data-index', i);\n    \n    // apply data-active to first index\n    if (i === 0) {\n      slides[i].setAttribute('data-active', \"\");\n    }\n  }\n\n  // create horizontal dot row\n  createDotBar(container, slides);\n\n  // set timer to advance slides if chosen\n  let timer;\n\n  if (interval !== 0) {\n    timer = setInterval(() => {\n      moveSliderForward(container, slides);\n    }, interval);\n  }\n  \n  // Add event listeners to buttons\n\n  nextBtn.addEventListener('click', () => {\n    moveSliderForward(container, slides);\n    if (timer) {\n      clearInterval(timer);\n      timer = setInterval(() => {\n        moveSliderForward(container, slides);\n      }, interval);\n    }\n  } );\n\n  prevBtn.addEventListener('click', () => {\n    moveSliderBackward(container, slides);\n    if (timer) {\n      clearInterval(timer);\n      timer = setInterval(() => {\n        moveSliderForward(container, slides);\n      }, interval);\n    }\n  } );\n\n  // Add event listeners to dots.\n  const dots = container.querySelectorAll('.dot');\n  dots.forEach((dot, index) => {\n    const dotIndex = index;\n    const slides = container.querySelectorAll('.slide');\n    dot.addEventListener('click', () => {\n      // remove data-active from current slide and dot\n      const currentSlide = container.querySelector('.slide[data-active]');\n      currentSlide.removeAttribute('data-active');\n      const currentDot = container.querySelector('.dot[data-active]');\n      currentDot.removeAttribute('data-active');\n\n      // Set data-active on new slide and dot\n      slides[dotIndex].setAttribute('data-active', '');\n      dot.setAttribute('data-active', '');\n\n      // reset timer\n      if (timer) {\n        clearInterval(timer);\n        timer = setInterval(() => {\n          moveSliderForward(container, slides);\n        }, interval);\n      }  \n    })\n  })\n  \n\n}\n\n\n\n\nexport {setupSlider};","import { setupSlider } from \"../../dist/image-slider\";\n\nsetupSlider();"],"names":["moveSliderForward","container","slides","currentSlide","querySelector","currentIndex","dataset","index","dots","querySelectorAll","currentDot","removeAttribute","String","length","setAttribute","nextIndex","Number","containerSelector","slidesSelector","interval","document","prevBtn","createElement","classList","add","appendChild","nextBtn","i","timer","dotContainer","dot","createDotBar","setInterval","addEventListener","clearInterval","prevIndex","moveSliderBackward","forEach","dotIndex","setupSlider"],"sourceRoot":""}